module("<%= underscore %>")

test("findAll", function(){
   <%= className %>.findAll({}, function(){
        ok(<%= plural %>, "<%= plural %> exists")
        ok(<%= plural %>.length, "<%= plural %> has length")
        ok(<%= plural %>[0].name, "<%= plural %> has a name")
        ok(<%= plural %>[0].description, "<%= plural %> has a description")
   })
})
/**

asyncTest("Checks attributes for SearchResult.", function(){

	Cashnet.Models.SearchResult.findAll({'query': 'mari'}, function(instances){
        ok(instances.length > 0, "Check model instances were created.");
        var instance = instances[0];
        ok(instance["id"], "id exists.");        
        ok(instance["status_cd"], "status_cd exists.");
        ok(instance["person"], "person exists.");
        start();
    });

});

jQuery.Test.Unit.extend("Tests.Unit.<%= name %>",{
    test_findAll: function() {
       <%= className %>.findAll({}, this.callback("found"))
    },
    found : function(<%= plural %>){
        this.assert(<%= plural %>)
        this.assert(<%= plural %>.length)
        this.assert(<%= plural %>[0].name)
        this.assert(<%= plural %>[0].description)
    },
    test_create : function(){
        new <%= name %>({name: "dry cleaning", description: "take to street corner"}).save(this.callback("created"))
    },
    created : function(<%= underscore %>){
        this.assert(<%= underscore %>);
        this.assert(<%= underscore %>.id);
        this.assertEqual("dry cleaning",<%= underscore %>.name)
        <%= underscore %>.destroy()
    },
    test_update : function(){
        new <%= name %>({name: "cook dinner", description: "chicken"}).
            save(this.callback("updateCreated"))
    },
    updateCreated : function(<%= underscore %>){
        this.assertEqual("chicken",<%= underscore %>.description);
        <%= underscore %>.update({description: "steak"},this.callback("updated"))
    },
    updated : function(<%= underscore %>){
        this.assertEqual("steak",<%= underscore %>.description);
        <%= underscore %>.destroy();
    },
    test_destroy : function(){
        new <%= name %>({name: "mow grass", description: "use riding mower"}).
            save(this.callback("destroyCreated"))
    },
    destroyCreated : function(<%= underscore %>){
        <%= underscore %>.destroy(this.callback("destroyed"))
    },
    destroyed : function(<%= underscore %>){
        this.assertNull( <%= name %>.store.findOne(<%= underscore %>.id) )
    }
});

**/